class MaintenanceTicket {
	Status {
    	
        InReview {
        	assign(HotelStaff staffMember, TimeEstimate timeToResolve, PriorityLevel priority, boolean requiresManagerApproval, Manager manager) / {
            	doAssign(staffMember, timeToResolve, priority, requiresManagerApproval, manager);
            } -> Assigned;

          startTicket / { preventTransition("Cannot start a maintenance ticket which is open."); } -> InReview;
          closeTicket / {preventTransition("Cannot complete a maintenance ticket which is open."); } -> InReview;
          disapproveTicket(Date date, String description, Manager manager) / { preventTransition("Cannot disapprove a maintenance ticket which is open."); } -> InReview;
          approveTicket / { preventTransition("Cannot approve a maintenance ticket which is open."); } -> InReview;
        }
      
      	Assigned {
        	startTicket -> InProgress;

          assign(HotelStaff staffMember, TimeEstimate timeToResolve, PriorityLevel priority, boolean requiresManagerApproval, Manager manager) / { preventTransition("The maintenance ticket is already assigned."); } -> Assigned;
          closeTicket / { preventTransition("Cannot complete a maintenance ticket which is assigned."); } -> Assigned;
          disapproveTicket(Date date, String description, Manager manager) / { preventTransition("Cannot disapprove a maintenance ticket which is assigned."); } -> Assigned;
          approveTicket / { preventTransition("Cannot approve a maintenance ticket which is assigned."); } -> Assigned;
        }
      
      	InProgress {
        	closeTicket [!requiresManagerApproval()] -> Closed;
          closeTicket [requiresManagerApproval()] -> AwaitingApproval;

          assign(HotelStaff staffMember, TimeEstimate timeToResolve, PriorityLevel priority, boolean requiresManagerApproval, Manager manager) / { preventTransition("Cannot assign a maintenance ticket which is in progress."); } -> InProgress;
          startTicket / { preventTransition("The maintenance ticket is already in progress."); } -> InProgress;
          disapproveTicket(Date date, String description, Manager manager) / { preventTransition("Cannot disapprove a maintenance ticket which is in progress."); } -> InProgress;
          approveTicket / { preventTransition("Cannot approve a maintenance ticket which is in progress."); } -> InProgress;
        }
      
      	AwaitingApproval {
        	disapproveTicket(Date date, String description, Manager manager) / { doDisapprove(date, description, manager); } -> InProgress;
          approveTicket -> Closed;

          assign(HotelStaff staffMember, TimeEstimate timeToResolve, PriorityLevel priority, boolean requiresManagerApproval, Manager manager) / { preventTransition("Cannot assign a maintenance ticket which is resolved."); } -> AwaitingApproval;
          startTicket / { preventTransition("Cannot start a maintenance ticket which is resolved."); } -> AwaitingApproval;
          closeTicket / { preventTransition("The maintenance ticket is already resolved.");} -> AwaitingApproval;
        }
      
      	Closed {
        	assign(HotelStaff staffMember, TimeEstimate timeToResolve, PriorityLevel priority, boolean requiresManagerApproval, Manager manager) / { preventTransition("Cannot assign a maintenance ticket which is closed."); } -> Closed;
          startTicket / { preventTransition("Cannot start a maintenance ticket which is closed."); } -> Closed;
          closeTicket / { preventTransition("The maintenance ticket is already closed."); } -> Closed;
          disapproveTicket(Date date, String description, Manager manager) / { preventTransition("Cannot disapprove a maintenance ticket which is closed."); } -> Closed;
          approveTicket / { preventTransition("The maintenance ticket is already closed."); } -> Closed;
        }
    }

    private void doAssign(HotelStaff staffMember, TimeEstimate timeToResolve, PriorityLevel priority, boolean requiresManagerApproval, Manager manager) {
      setTimeToResolve(timeToResolve);
      setPriority(priority);
      setTicketFixer(staffMember);
      if (requiresManagerApproval){
        setFixApprover(manager);
      }
      else{
        setFixApprover(null);
      }
    }

    private void doDisapprove(Date date, String description, Manager manager){
      MaintenanceNote note = new MaintenanceNote(date, description, this, manager);
    }

    private boolean requiresManagerApproval() {
        return hasFixApprover();
    }

    private void preventTransition(String msg) {
      throw new RuntimeException(msg);
    }
}